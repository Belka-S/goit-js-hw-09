{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAM,CACVC,QAASC,SAASC,cAAc,uBAChCC,OAAQF,SAASC,cAAc,sBAC/BE,SAAUH,SAASC,cAAc,wBACjCG,OAAQJ,SAASC,cAAc,cA6BjC,SAASI,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,GAAM,GAE1BA,EAAA,GAEP,CApCAT,EAAIM,OAAOW,iBAAiB,UAE5B,SAAkBC,GAChBA,EAAEC,iBAEF,IAAIX,EAAW,EACXC,EAAQW,OAAOpB,EAAIC,QAAQoB,OAC/B,MAAMC,EAAOF,OAAOpB,EAAII,OAAOiB,OACzBE,EAASH,OAAOpB,EAAIK,SAASgB,OAEnC,KAAOb,GAAYe,GACjBhB,EAAcC,EAAUC,GACrBe,MAAK,EAAChB,SAAEA,EAAQC,MAAEA,MACjBgB,QAAQC,IAAI,uBAAuBlB,QAAeC,OAClDX,EAAA6B,OAAOC,QAAQ,qBAAqBpB,QAAeC,MAAS,IAE7DoB,OAAM,EAACrB,SAAEA,EAAQC,MAAEA,MAClBgB,QAAQC,IAAI,sBAAsBlB,QAAeC,OACjDX,EAAA6B,OAAOG,QAAQ,oBAAoBtB,QAAeC,MAAS,IAE/DD,GAAY,EACZC,GAASa,CAEb","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst ref = {\n  delayEl: document.querySelector('input[name=\"delay\"]'),\n  stepEl: document.querySelector('input[name=\"step\"]'),\n  amountEl: document.querySelector('input[name=\"amount\"]'),\n  formEl: document.querySelector('form.form'),\n};\n// Object.values(ref).forEach(el => console.log(el));\n\nref.formEl.addEventListener('submit', onSubmit);\n\nfunction onSubmit(e) {\n  e.preventDefault();\n\n  let position = 1;\n  let delay = Number(ref.delayEl.value);\n  const step = Number(ref.stepEl.value);\n  const amount = Number(ref.amountEl.value);\n\n  while (position <= amount) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n    position += 1;\n    delay += step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$ref","delayEl","document","querySelector","stepEl","amountEl","formEl","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","Number","value","step","amount","then","console","log","Notify","success","catch","failure"],"version":3,"file":"03-promises.dbf08aa7.js.map"}